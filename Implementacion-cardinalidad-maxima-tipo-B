
/*
 *
 * Implementación de cardinalidad máxima sobre bases de datos con una implementacion de tipo B.
 *
 */

/********************* ROLES **********************/

CREATE ROLE ADMI_ROLE;
CREATE ROLE USER_ROLE;
/********************* UDFS ***********************/

/********************* FUNCTIONS ***********************/

/****************** SEQUENCES ********************/

CREATE SEQUENCE GEN_CODIGO_CLIENTE ;
CREATE SEQUENCE GEN_CODIGO_FACTURA ;
/******************** DOMAINS *********************/

/******************* PROCEDURES ******************/

SET TERM ^ ;
CREATE PROCEDURE PRO_DCLIENTE (
    PCODIGO TYPE OF COLUMN TBL_CLIENTES.CODIGO )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE PRO_DFACTURA (
    PCODIGO TYPE OF COLUMN TBL_FACTURAS.CODIGO )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE PRO_ICLIENTE (
    PNOMBRE TYPE OF COLUMN TBL_CLIENTES.NOMBRE,
    PAPELLIDO TYPE OF COLUMN TBL_CLIENTES.APELLIDO )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE PRO_IFACTURA (
    PCODIGO_CLIENTE TYPE OF COLUMN TBL_FACTURAS.CODIGO_CLIENTE,
    PMONTO TYPE OF COLUMN TBL_FACTURAS.MONTO )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE PRO_UCLIENTE (
    PCODIGO TYPE OF COLUMN TBL_CLIENTES.CODIGO,
    PNOMBRE TYPE OF COLUMN TBL_CLIENTES.NOMBRE,
    PAPELLIDO TYPE OF COLUMN TBL_CLIENTES.APELLIDO )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE PRO_UFACTURA (
    PCODIGO TYPE OF COLUMN TBL_FACTURAS.CODIGO,
    PFECHA_PAGO TYPE OF COLUMN TBL_FACTURAS.FECHA_PAGO,
    PFACTURA_PAGA TYPE OF COLUMN TBL_FACTURAS.FACTURA_PAGA,
    PMONTO TYPE OF COLUMN TBL_FACTURAS.MONTO )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

/******************* PACKAGES ******************/

/******************** TABLES **********************/

CREATE TABLE TBL_CLIENTES
(
  CODIGO integer NOT NULL,
  NOMBRE varchar(20) NOT NULL,
  APELLIDO varchar(20) NOT NULL,
  FECHA_INICIO date DEFAULT CURRENT_DATE NOT NULL,
  FACTURAS_PENDIENTES integer DEFAULT 0 NOT NULL,
  CONSTRAINT PK_CLIENTES PRIMARY KEY (CODIGO)
);
CREATE TABLE TBL_FACTURAS
(
  CODIGO integer NOT NULL,
  CODIGO_CLIENTE integer NOT NULL,
  FECHA_EMISION date DEFAULT CURRENT_DATE NOT NULL,
  FECHA_PAGO date,
  FACTURA_PAGA boolean DEFAULT FALSE NOT NULL,
  MONTO double precision DEFAULT 0 NOT NULL,
  CONSTRAINT PK_FACTURAS PRIMARY KEY (CODIGO)
);
/********************* VIEWS **********************/

/******************* EXCEPTIONS *******************/

CREATE EXCEPTION EX_CAMBIO_PK_CLIENTE
'No se permite el cambio de codigo del cliente!';
CREATE EXCEPTION EX_CAMBIO_PK_FACTURA
'No se permite el cambio de codigo de la factura!';
CREATE EXCEPTION EX_MAXIMO_FACTURAS_CLIENTE
'No se puede agregar mas facturas al cliente';
/******************** TRIGGERS ********************/

SET TERM ^ ;
CREATE TRIGGER TRG_ADCLIENTES FOR TBL_CLIENTES ACTIVE
AFTER delete POSITION 0

AS 
BEGIN     
    DELETE FROM TBL_FACTURAS
    WHERE CODIGO_CLIENTE = OLD.CODIGO; 
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_ADFACTURAS FOR TBL_FACTURAS ACTIVE
AFTER delete POSITION 0

AS
BEGIN
    UPDATE TBL_CLIENTES SET 
        FACTURAS_PENDIENTES = FACTURAS_PENDIENTES - 1
    WHERE CODIGO = OLD.CODIGO_CLIENTE;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_AIFACTURAS FOR TBL_FACTURAS ACTIVE
AFTER insert POSITION 0

AS 
BEGIN 
    IF ( NEW.FACTURA_PAGA = FALSE ) THEN 
        UPDATE TBL_CLIENTES SET 
            FACTURAS_PENDIENTES = FACTURAS_PENDIENTES + 1
        WHERE CODIGO = NEW.CODIGO_CLIENTE;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_AUFACTURAS FOR TBL_FACTURAS ACTIVE
AFTER update POSITION 0

AS
BEGIN
    IF ( NEW.FACTURA_PAGA = TRUE ) THEN
        UPDATE TBL_CLIENTES SET 
            FACTURAS_PENDIENTES = FACTURAS_PENDIENTES - 1
        WHERE CODIGO = NEW.CODIGO_CLIENTE;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BICLIENTES FOR TBL_CLIENTES ACTIVE
BEFORE insert POSITION 0

AS 
BEGIN 
    NEW.CODIGO = GEN_ID(GEN_CODIGO_CLIENTE, 1);
    NEW.FACTURAS_PENDIENTES = 0;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BIFACTURAS FOR TBL_FACTURAS ACTIVE
BEFORE insert POSITION 0

AS
BEGIN
    IF ( (NEW.FACTURA_PAGA = FALSE) AND
    ( SELECT FACTURAS_PENDIENTES FROM TBL_CLIENTES WHERE CODIGO = NEW.CODIGO_CLIENTE ) >= 3 ) THEN
        EXCEPTION EX_MAXIMO_FACTURAS_CLIENTE;
        
    NEW.CODIGO = GEN_ID(GEN_CODIGO_FACTURA, 1);
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BUCLIENTES FOR TBL_CLIENTES ACTIVE
BEFORE update POSITION 0

AS 
BEGIN 
    IF ( NEW.CODIGO <> OLD.CODIGO ) THEN
        EXCEPTION EX_CAMBIO_PK_CLIENTE;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BUFACTURAS FOR TBL_FACTURAS ACTIVE
BEFORE update POSITION 0

AS
BEGIN
    IF ( NEW.CODIGO <> OLD.CODIGO ) THEN
        EXCEPTION EX_CAMBIO_PK_FACTURA;
END
^
SET TERM ; ^
/******************** DB TRIGGERS ********************/

/******************** DDL TRIGGERS ********************/


SET TERM ^ ;
ALTER PROCEDURE PRO_DCLIENTE (
    PCODIGO TYPE OF COLUMN TBL_CLIENTES.CODIGO )


AS
BEGIN
    DELETE FROM TBL_CLIENTES
    WHERE CODIGO = :PCODIGO;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE PRO_DFACTURA (
    PCODIGO TYPE OF COLUMN TBL_FACTURAS.CODIGO )


AS
BEGIN
    DELETE FROM TBL_FACTURAS
    WHERE CODIGO = :PCODIGO;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE PRO_ICLIENTE (
    PNOMBRE TYPE OF COLUMN TBL_CLIENTES.NOMBRE,
    PAPELLIDO TYPE OF COLUMN TBL_CLIENTES.APELLIDO )


AS
BEGIN
    INSERT INTO TBL_CLIENTES (NOMBRE, APELLIDO) VALUES (
        :PNOMBRE,
        :PAPELLIDO
    );
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE PRO_IFACTURA (
    PCODIGO_CLIENTE TYPE OF COLUMN TBL_FACTURAS.CODIGO_CLIENTE,
    PMONTO TYPE OF COLUMN TBL_FACTURAS.MONTO )


AS
BEGIN
    INSERT INTO TBL_FACTURAS (CODIGO_CLIENTE, MONTO) VALUES (
            :PCODIGO_CLIENTE,
            :PMONTO
    );
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE PRO_UCLIENTE (
    PCODIGO TYPE OF COLUMN TBL_CLIENTES.CODIGO,
    PNOMBRE TYPE OF COLUMN TBL_CLIENTES.NOMBRE,
    PAPELLIDO TYPE OF COLUMN TBL_CLIENTES.APELLIDO )


AS
BEGIN
    UPDATE TBL_CLIENTES SET
        NOMBRE = :PNOMBRE,
        APELLIDO = :PAPELLIDO
    WHERE CODIGO = :PCODIGO;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE PRO_UFACTURA (
    PCODIGO TYPE OF COLUMN TBL_FACTURAS.CODIGO,
    PFECHA_PAGO TYPE OF COLUMN TBL_FACTURAS.FECHA_PAGO,
    PFACTURA_PAGA TYPE OF COLUMN TBL_FACTURAS.FACTURA_PAGA,
    PMONTO TYPE OF COLUMN TBL_FACTURAS.MONTO )


AS
BEGIN
    UPDATE TBL_FACTURAS SET 
            FECHA_PAGO = :PFECHA_PAGO,
            FACTURA_PAGA = :PFACTURA_PAGA,
            MONTO = :PMONTO
    WHERE CODIGO = :PCODIGO;
END
^
SET TERM ; ^


GRANT ADMI_ROLE TO ADMI;
GRANT USER_ROLE TO USUARIO;
GRANT EXECUTE
 ON PROCEDURE PRO_DCLIENTE TO ROLE ADMI_ROLE;

GRANT EXECUTE
 ON PROCEDURE PRO_DCLIENTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE PRO_DCLIENTE TO ROLE USER_ROLE;

GRANT EXECUTE
 ON PROCEDURE PRO_DFACTURA TO ROLE ADMI_ROLE;

GRANT EXECUTE
 ON PROCEDURE PRO_DFACTURA TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE PRO_DFACTURA TO ROLE USER_ROLE;

GRANT EXECUTE
 ON PROCEDURE PRO_ICLIENTE TO ROLE ADMI_ROLE;

GRANT EXECUTE
 ON PROCEDURE PRO_ICLIENTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE PRO_ICLIENTE TO ROLE USER_ROLE;

GRANT EXECUTE
 ON PROCEDURE PRO_IFACTURA TO ROLE ADMI_ROLE;

GRANT EXECUTE
 ON PROCEDURE PRO_IFACTURA TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE PRO_IFACTURA TO ROLE USER_ROLE;

GRANT EXECUTE
 ON PROCEDURE PRO_UCLIENTE TO ROLE ADMI_ROLE;

GRANT EXECUTE
 ON PROCEDURE PRO_UCLIENTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE PRO_UCLIENTE TO ROLE USER_ROLE;

GRANT EXECUTE
 ON PROCEDURE PRO_UFACTURA TO ROLE ADMI_ROLE;

GRANT EXECUTE
 ON PROCEDURE PRO_UFACTURA TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE PRO_UFACTURA TO ROLE USER_ROLE;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON TBL_CLIENTES TO ROLE ADMI_ROLE;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_CLIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT UPDATE
 ON TBL_CLIENTES TO TRIGGER TRG_ADFACTURAS;

GRANT UPDATE
 ON TBL_CLIENTES TO TRIGGER TRG_AIFACTURAS;

GRANT UPDATE
 ON TBL_CLIENTES TO TRIGGER TRG_AUFACTURAS;

GRANT SELECT
 ON TBL_CLIENTES TO TRIGGER TRG_BIFACTURAS;

GRANT SELECT
 ON TBL_CLIENTES TO ROLE USER_ROLE;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON TBL_FACTURAS TO ROLE ADMI_ROLE;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_FACTURAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE
 ON TBL_FACTURAS TO TRIGGER TRG_ADCLIENTES;

GRANT SELECT
 ON TBL_FACTURAS TO ROLE USER_ROLE;

